"""Added the missing current_revision key to the EpisodeSection table

TL;DR: MediaWiki has an interesting design...

Why oh why is current_revision_id nullable, you might ask... According to our own documentation, we follow MediaWiki's 
design. Mentioned in the database design is that Revision.revision_id is an autoincrement primary key, 
Revision.section_id is a foreign key to the Section.id, the primary key of the section table. Then the Section table 
has a value for current_revision, which is a foreign key to the Revision.revision_id value.
If we follow MediaWiki's documentation, we notice the following text:
"page_latest
This is a foreign key to rev_id for the current revision. It may be 0 during page creation. It needs to link to a 
revision with a valid revision.rev_page, or there will be the "The revision #0 of the page named 'Foo' does not exist" 
error when one tries to view the page."
So okay, that suggests we put in a nullable=False, because otherwise shit hits the fan. We would have to be careful with 
the creation of the section and revision rows... Think carefully though: if both `episode_section` and  
`episode_revision` would have the values acting as foreign key to the other as NOT NULL, and the ID is only created for 
real at the end of the transaction, how the hell does this work?
Next step: checking MediaWiki's sources: Turns out there are multiple DDL files, depending on what database dialect you 
use. MySQL is the default and when checking that one, it shows Page.page_latest as NOT NULL and Revision.rev_page as NOT 
NULL as well. Strange right? How does this work... Well, it becomes clear when searching for a foreign key: there is no 
foreign key defined. When looking at the (experimental) MSSQL DDL, Page.page_latest is suddenly NULL as default, while 
Revision.rev_page is NOT NULL. There is indeed the expected foreign key defined.
And since we very much would like that foreign key, we're going to use the nullable=True for `current_revision_id` to 
make it possible.

Revision ID: ba0bbd1660c5
Revises: 
Create Date: 2017-04-24 14:50:22.100014

"""
from alembic import op
import sqlalchemy as sa


# revision identifiers, used by Alembic.
revision = 'ba0bbd1660c5'
down_revision = None
branch_labels = None
depends_on = None


def upgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.add_column('episode_section', sa.Column('current_revision_id', sa.Integer(), nullable=True))
    op.create_foreign_key(op.f('fk_episode_section_episode_revision_id'), 'episode_section', 'episode_revision',
                          ['current_revision_id'], ['id'])
    # ### end Alembic commands ###


def downgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_constraint(op.f('fk_episode_section_episode_revision_id'), 'episode_section', type_='foreignkey')
    op.drop_column('episode_section', 'current_revision_id')
    # ### end Alembic commands ###
